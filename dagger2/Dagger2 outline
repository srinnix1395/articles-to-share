1. Part I - Basic principles
- What is Dependency?
- Disadvantage of hard dependency:
  + Hard dependencies reduce the reusability
  + Hard dependencies make it hard for testing
  + Hard dependencies hinders code maintainability when the project scales up
- What is IoC?
- What is DIP?
- What is DI?
- What kind of injection:
  + Constructor injection
  + Fields injection: must not be "private"
  + Method injection

2. Part II - Into the Dagger 2
- Dagger introduction, compare Dagger 1 and Dagger 2
- Dependency grapgh
- Dagger 2 annotation
  + @Component
  + @Inject
  + @Module:
  + @Scope
  + @Qualifier
  + @Provide
- The very first basic program with @Inject, @Compoment, @Module, @Provides, @Bind, @Qualifier
- Field injection

3. Part III - The time of our dependencies
- @Scope
- Dependency component vs sub-component
- Optional:
  + Global singleton and Local singleton
  + Singleton has implicit dependency
  + Singleton creation
    . file Module
    . file Component

#Reference
- IOC, DIP, DI: https://www.tutorialsteacher.com/ioc/introduction
- https://developer.android.com/training/dependency-injection/dagger-android
- https://www.vogella.com/tutorials/Dagger/article.html
- https://m.facebook.com/groups/laptrinh.android/permalink/2302990506416007/
- https://medium.com/@harivigneshjayapalan/dagger-2-for-android-beginners-introduction-be6580cb3edb
- https://android.jlelse.eu/dagger-2-part-i-basic-principles-graph-dependencies-scopes-3dfd032ccd82
- https://guides.codepath.com/android/dependency-injection-with-dagger-2
- https://academy.realm.io/posts/daniel-lew-dependency-injection-dagger/
- Subcomponent or component dependency:
  + https://github.com/google/dagger/issues/1364
  + https://proandroiddev.com/dagger-2-component-relationships-custom-scopes-8d7e05e70a37
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- Note:
  + Since Dagger 2 is operated with the code generation but not with the reflection you always have to set concrete types (no abstractions or generics)!
  + Dagger 1 uses Java reflection to achieve DI, therefore it's slow and it used to perform dependency resolution at RUN-TIME
  + Dagger 2 uses Generating code to achieve DI, it used perform dependency resolution at COMPILE-TIME
